// ==================== Encoded Exercise Database ====================
// Exercises are base64 encoded to prevent casual viewing of answers
const ENCODED_EXERCISES =
  "";

// ==================== Exercise Decoding (UTF-8 SAFE FIX - High Compatibility) ====================
function decodeExercises() {
  try {
    // 1. Base64 decode
    const decoded = atob(ENCODED_EXERCISES);

    // 2. UTF-8 Safe Conversion: Converts corrupted ASCII bytes into correct UTF-8 percent-encoding.
    const utf8Decoded = decodeURIComponent(
      decoded
        .split("")
        .map(function (c) {
          return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
        })
        .join("")
    );

    // 3. Parse the now-clean UTF-8 JSON string
    return JSON.parse(utf8Decoded);
  } catch (error) {
    // Since the string has been fixed, this error should no longer occur
    console.error("Error decoding exercises:", error);
    return null;
  }
}

// ==================== Configuration ====================
const CONFIG = {
  DEFAULT_TIMER: 30,
  NEXT_QUESTION_DELAY: 1500,
};

// ==================== State Management ====================
const state = {
  exerciseDatabase: {},
  selectedTopics: [],
  currentQuestions: [],
  currentIndex: 0,
  score: 0,
  isQuizActive: false,
  timerInterval: null,
};

// ==================== Utility Functions ====================
const utils = {
  capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },

  shuffleArray(array) {
    return [...array].sort(() => Math.random() - 0.5);
  },

  showError(container, message, detail = "") {
    container.innerHTML = `
            <div class="error-message">
                <p><strong>⚠️ ${message}</strong></p>
                ${detail ? `<p>${detail}</p>` : ""}
            </div>
        `;
  },

  showLoading(container, message = "Loading...") {
    container.innerHTML = `
            <div class="loading-state">
                <p>📚 ${message}</p>
            </div>
        `;
  },

  showEmptyState(container) {
    container.innerHTML = `
            <div class="empty-state">
                <p>👆 Select topics above and click "Start Practice" to begin!</p>
            </div>
        `;
  },

  getScoreEmoji(percentage) {
    if (percentage === 100) return { emoji: "🏆", message: "Perfect Score!" };
    if (percentage >= 80) return { emoji: "🌟", message: "Excellent!" };
    if (percentage >= 60) return { emoji: "👍", message: "Well done!" };
    if (percentage >= 40) return { emoji: "📚", message: "Keep practicing!" };
    return { emoji: "🎉", message: "Good effort!" };
  },
};

// ==================== Safe Modal Wrapper ====================
function safeModal(message, opts = {}) {
  if (window.PolishApp && typeof window.PolishApp.showModal === "function") {
    window.PolishApp.showModal(message, opts);
  } else {
    alert(message);
  }
}

// ==================== Exercise Loading ====================
function loadExercises() {
  const app = window.PolishApp;
  const container = document.getElementById("exerciseCard");

  try {
    utils.showLoading(container, "Loading exercises...");

    // FIX: Correctly call the decoding function
    const decodedExercises = decodeExercises();
    state.exerciseDatabase = decodedExercises;

    // Validate the loaded data
    if (!state.exerciseDatabase || typeof state.exerciseDatabase !== "object") {
      throw new Error("Invalid exercise data format");
    }

    initTopicFilters();
    utils.showEmptyState(container);

    // Fade in effect if PolishApp is available
    if (app && app.effects && app.effects.fadeIn) {
      container.style.opacity = 0;
      app.effects.fadeIn(container);
    }
  } catch (error) {
    console.error("Error loading exercises:", error);
    utils.showError(
      container,
      "Could not load exercises",
      "There was an error initializing the exercises."
    );
  }
}

// ==================== Topic Filter Management ====================
function initTopicFilters() {
  const app = window.PolishApp;
  const container = document.getElementById("topicFilters");

  if (!container) return;

  container.innerHTML = "";
  const topics = Object.keys(state.exerciseDatabase);

  if (topics.length === 0) {
    container.innerHTML = '<p style="color: #999;">No topics available</p>';
    return;
  }

  topics.forEach((topic) => {
    const exercises = state.exerciseDatabase[topic];
    const count = Array.isArray(exercises) ? exercises.length : 0;

    const filterOption = createFilterOption(topic, count);
    container.appendChild(filterOption);
  });
}

function createFilterOption(topic, count) {
  const app = window.PolishApp;
  const div = document.createElement("div");
  div.className = "filter-option";
  div.innerHTML = `
        <input type="checkbox" id="topic-${topic}" value="${topic}">
        <label for="topic-${topic}">${utils.capitalizeFirst(topic)}</label>
        <span class="count-badge">${count}</span>
    `;

  const checkbox = div.querySelector("input");

  // Click anywhere on the option to toggle
  const clickHandler = (e) => {
    if (e.target.tagName !== "INPUT") {
      checkbox.checked = !checkbox.checked;
      checkbox.dispatchEvent(new Event("change"));
    }
  };

  // Handle checkbox change
  const changeHandler = (e) => {
    div.classList.toggle("active", e.target.checked);
    updateSelectedTopics();
  };

  // Use PolishApp DOM utilities if available
  if (app && app.dom && app.dom.addEvent) {
    app.dom.addEvent(div, "click", clickHandler);
    app.dom.addEvent(checkbox, "change", changeHandler);
  } else {
    div.addEventListener("click", clickHandler);
    checkbox.addEventListener("change", changeHandler);
  }

  return div;
}

function updateSelectedTopics() {
  const checkboxes = document.querySelectorAll(
    '#topicFilters input[type="checkbox"]'
  );
  state.selectedTopics = Array.from(checkboxes)
    .filter((cb) => cb.checked)
    .map((cb) => cb.value);

  const startBtn = document.getElementById("startBtn");
  if (startBtn) {
    startBtn.disabled = state.selectedTopics.length === 0 || state.isQuizActive;
  }
}

// ==================== Quiz Management ====================
function startPractice() {
  // Gather questions from selected topics
  state.currentQuestions = [];

  state.selectedTopics.forEach((topic) => {
    const exercises = state.exerciseDatabase[topic];
    if (Array.isArray(exercises)) {
      state.currentQuestions.push(...exercises);
    }
  });

  if (state.currentQuestions.length === 0) {
    safeModal("Please select at least one topic!");
    return;
  }

  // Shuffle if enabled
  const shuffleToggle = document.getElementById("shuffleToggle");
  if (shuffleToggle && shuffleToggle.checked) {
    state.currentQuestions = utils.shuffleArray(state.currentQuestions);
  }

  // Reset quiz state
  state.currentIndex = 0;
  state.score = 0;
  state.isQuizActive = true;

  // Update UI
  const startBtn = document.getElementById("startBtn");
  const resetBtn = document.getElementById("resetBtn");

  if (startBtn) startBtn.style.display = "none";
  if (resetBtn) resetBtn.style.display = "inline-block";

  // Disable topic selection during quiz
  disableTopicSelection(true);

  showQuestion();
}

function resetQuiz() {
  clearInterval(state.timerInterval);

  // Reset state
  state.isQuizActive = false;
  state.currentIndex = 0;
  state.score = 0;
  state.currentQuestions = [];

  // Update UI
  const startBtn = document.getElementById("startBtn");
  const resetBtn = document.getElementById("resetBtn");
  const progressFill = document.getElementById("progressFill");
  const container = document.getElementById("exerciseCard");

  if (startBtn) startBtn.style.display = "inline-block";
  if (resetBtn) resetBtn.style.display = "none";
  if (progressFill) progressFill.style.width = "0%";

  // Re-enable topic selection
  disableTopicSelection(false);

  if (container) {
    utils.showEmptyState(container);
  }

  updateSelectedTopics();
}

function disableTopicSelection(disabled) {
  const checkboxes = document.querySelectorAll("#topicFilters input");
  const filterOptions = document.querySelectorAll(".filter-option");

  checkboxes.forEach((cb) => (cb.disabled = disabled));
  filterOptions.forEach((opt) => (opt.style.opacity = disabled ? "0.6" : "1"));
}

// ==================== Question Display ====================
function showQuestion() {
  const app = window.PolishApp;
  clearInterval(state.timerInterval);

  const container = document.getElementById("exerciseCard");
  const question = state.currentQuestions[state.currentIndex];

  // Check if quiz is complete
  if (!question) {
    showFinalScore();
    return;
  }

  updateProgress();

  // Build question HTML
  container.innerHTML = `
        <div class="question-number">Question ${state.currentIndex + 1} of ${
    state.currentQuestions.length
  }</div>
        <div class="topic-tag">${utils.capitalizeFirst(question.topic)}</div>
        <div class="question-text">${question.question}</div>
        <input type="text" class="answer-input" id="answerInput" placeholder="Type your answer..." autofocus>
        <button class="btn" id="checkBtn">Check Answer</button>
        <div id="resultMessage"></div>
        <div class="score-display">Score: ${state.score} / ${
    state.currentIndex
  }</div>
        <div class="timer-display" id="timerDisplay"></div>
    `;

  // Fade in effect using PolishApp if available
  if (app && app.effects && app.effects.fadeIn) {
    container.style.opacity = 0;
    app.effects.fadeIn(container);
  }

  // Attach event listeners
  const checkBtn = document.getElementById("checkBtn");
  const answerInput = document.getElementById("answerInput");

  if (checkBtn) {
    if (app && app.dom && app.dom.addEvent) {
      app.dom.addEvent(checkBtn, "click", checkAnswer);
    } else {
      checkBtn.addEventListener("click", checkAnswer);
    }
  }

  if (answerInput) {
    const enterHandler = (e) => {
      if (e.key === "Enter") checkAnswer();
    };

    if (app && app.dom && app.dom.addEvent) {
      app.dom.addEvent(answerInput, "keypress", enterHandler);
    } else {
      answerInput.addEventListener("keypress", enterHandler);
    }
  }

  startTimer();
}

// ==================== Timer Management ====================
function startTimer() {
  clearInterval(state.timerInterval);

  const timerSelect = document.getElementById("timerSelect");
  let timeLeft = timerSelect
    ? parseInt(timerSelect.value)
    : CONFIG.DEFAULT_TIMER;

  if (timeLeft === 0) return; // No timer

  const display = document.getElementById("timerDisplay");
  if (!display) return;

  display.textContent = `⏱️ Time: ${timeLeft}s`;

  state.timerInterval = setInterval(() => {
    timeLeft--;
    display.textContent = `⏱️ Time: ${timeLeft}s`;

    if (timeLeft <= 0) {
      clearInterval(state.timerInterval);
      showResult(false, true);
    }
  }, 1000);
}

// ==================== Answer Checking ====================
function checkAnswer() {
  clearInterval(state.timerInterval);

  const answerInput = document.getElementById("answerInput");
  if (!answerInput) return;

  const userAnswer = answerInput.value.trim().toLowerCase();
  const question = state.currentQuestions[state.currentIndex];
  const correctAnswer = question.answer.toLowerCase();

  const isCorrect = userAnswer === correctAnswer;
  if (isCorrect) state.score++;

  showResult(isCorrect, false);
}

function showResult(isCorrect, timeUp) {
  const question = state.currentQuestions[state.currentIndex];
  const resultDiv = document.getElementById("resultMessage");
  const checkBtn = document.getElementById("checkBtn");
  const answerInput = document.getElementById("answerInput");

  if (!resultDiv || !checkBtn || !answerInput) return;

  // Disable input
  answerInput.disabled = true;

  // Show result message
  if (timeUp) {
    resultDiv.innerHTML = `
            <div class="result-message result-incorrect">
                ⏰ Time's up! Correct answer: <strong>${question.answer}</strong>
            </div>
        `;
  } else if (isCorrect) {
    resultDiv.innerHTML = `
            <div class="result-message result-correct">✅ Correct!</div>
        `;
  } else {
    resultDiv.innerHTML = `
            <div class="result-message result-incorrect">
                ❌ Incorrect. Correct answer: <strong>${question.answer}</strong>
            </div>
        `;
  }

  // Change button to "Next Question"
  checkBtn.textContent = "Next Question";
  checkBtn.onclick = nextQuestion;
}

function nextQuestion() {
  state.currentIndex++;
  setTimeout(() => showQuestion(), CONFIG.NEXT_QUESTION_DELAY);
}

// ==================== Final Score Display ====================
function showFinalScore() {
  const app = window.PolishApp;
  const container = document.getElementById("exerciseCard");
  if (!container) return;

  const percentage = Math.round(
    (state.score / state.currentQuestions.length) * 100
  );
  const { emoji, message } = utils.getScoreEmoji(percentage);

  container.innerHTML = `
        <div style="animation: fadeIn 0.8s ease;">
            <div style="font-size: 4rem; margin-bottom: 20px;">${emoji}</div>
            <h2 style="color: #c61322; margin-bottom: 15px;">${message}</h2>
            <div class="final-score">${state.score} / ${state.currentQuestions.length}</div>
            <div style="font-size: 1.3rem; color: #666; margin-bottom: 30px;">${percentage}% Correct</div>
            <button class="btn" onclick="resetQuiz()">Practice Again</button>
        </div>
    `;

  // Fade in effect using PolishApp if available
  if (app && app.effects && app.effects.fadeIn) {
    container.style.opacity = 0;
    app.effects.fadeIn(container);
  }

  updateProgress(true);
  state.isQuizActive = false;
}

// ==================== Progress Bar ====================
function updateProgress(complete = false) {
  const progressFill = document.getElementById("progressFill");
  if (!progressFill) return;

  if (complete) {
    progressFill.style.width = "100%";
  } else {
    const percentage =
      (state.currentIndex / state.currentQuestions.length) * 100;
    progressFill.style.width = percentage + "%";
  }
}

// ==================== Initialization ====================
function init() {
  const app = window.PolishApp;

  // Wait for PolishApp if it's not ready yet
  if (!app || !app.dom) {
    return setTimeout(init, 40);
  }

  const { dom } = app;

  // Wait for DOM ready
  dom.onReady(() => {
    // Load exercises
    loadExercises();

    // Attach event listeners using PolishApp utilities
    const startBtn = dom.qs("#startBtn");
    const resetBtn = dom.qs("#resetBtn");

    if (startBtn) {
      dom.addEvent(startBtn, "click", startPractice);
      startBtn.disabled = true;
    }

    if (resetBtn) {
      dom.addEvent(resetBtn, "click", resetQuiz);
    }
  });
}

// Start initialization
init();

// Expose functions to global scope for compatibility
window.resetQuiz = resetQuiz;
window.startPractice = startPractice;
